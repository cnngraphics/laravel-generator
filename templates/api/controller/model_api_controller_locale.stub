<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_API_REQUEST$\Store$MODEL_NAME$APIRequest;
use $NAMESPACE_API_REQUEST$\Update$MODEL_NAME$APIRequest;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use Illuminate\Http\Request;
use $NAMESPACE_APP$\Http\Controllers\Controller;
use Response;

$DOC_CONTROLLER$
class $MODEL_NAME$APIController extends Controller
{
    $DOC_INDEX$
    public function index(Request $request)
    {
        $query = $MODEL_NAME$::query();

        if ($request->get('skip')) {
            $query->skip($request->get('skip'));
        }
        if ($request->get('limit')) {
            $query->limit($request->get('limit'));
        }

        $$MODEL_NAME_PLURAL_CAMEL$ = $query->get();

         return $this->sendResponse(
             $$MODEL_NAME_PLURAL_CAMEL$->toArray(),
             __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.retrieved')
         );
    }

    $DOC_STORE$
    public function store(Store$MODEL_NAME$APIRequest $request)
    {
        $input = $request->all();

        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::create($input);

        return $this->sendResponse(
             $$MODEL_NAME_CAMEL$->toArray(),
             __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.created')
        );
    }

    $DOC_SHOW$
    public function show($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            return $this->sendError(
                __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.not_found')
            );
        }

        return $this->sendResponse(
            $$MODEL_NAME_CAMEL$->toArray(),
            __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.retrieved')
        );
    }

    $DOC_UPDATE$
    public function update($id, Update$MODEL_NAME$APIRequest $request)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
           return $this->sendError(
               __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.not_found')
           );
        }

        $$MODEL_NAME_CAMEL$->fill($request->all());
        $$MODEL_NAME_CAMEL$->save();

        return $this->sendResponse(
             $$MODEL_NAME_CAMEL$->toArray(),
             __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.updated')
        );
    }

    $DOC_DESTROY$
    public function destroy($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::find($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
           return $this->sendError(
                 __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.not_found')
           );
        }

        $$MODEL_NAME_CAMEL$->delete();

         return $this->sendResponse(
             $id,
             __('$MODEL_LOCALE_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.alerts.deleted')
         );
    }
}
